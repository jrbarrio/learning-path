ext.versionFile = file('version.properties')

task loadVersion(group: 'versioning', description: 'Load version from properties file.') {
    project.version = readVersion()
}

task printVersion(group: 'versioning', description: 'Prints version.') {
    logger.quiet "Version: $version"
}

task incrementMajorVersion(group: 'versioning', description: 'Increments major version.') {
    inputs.property('major', version.major)
    outputs.file versionFile

    doLast {
        ++version.major
        version.minor = 0
        version.bugfix = 0
        version.release = false
        saveVersion()
    }
}

task incrementMinorVersion(group: 'versioning', description: 'Increments minor version.') {
    inputs.property('minor', version.minor)
    outputs.file versionFile

    doLast {
        ++version.minor
        version.bugfix = 0
        version.release = false
        saveVersion()
    }
}

task incrementBugfixVersion(group: 'versioning', description: 'Increments bugfix version.') {
    inputs.property('bugfix', version.bugfix)
    outputs.file versionFile

    doLast {
        logger.quiet "Incrementing bugfix version..."
        ++version.bugfix
        version.release = false
        saveVersion()
    }
}

task makeReleaseVersion(group: 'versioning', description: 'Sets release version.') {
    inputs.property('release', version.release)
    outputs.file versionFile

    doLast {
        version.release = true
        saveVersion()
    }
}

class ProjectVersion {
    Integer major
    Integer minor
    Integer bugfix
    Boolean release

    ProjectVersion(Integer major, Integer minor, Integer bugfix) {
        this.major = major
        this.minor = minor
        this.bugfix = bugfix
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Integer bugfix, Boolean release) {
        this(major, minor, bugfix)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor.$bugfix${release ? '' : '-SNAPSHOT'}"
    }
}

ProjectVersion readVersion() {
    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exit: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()
    versionFile.withInputStream { stream -> versionProps.load(stream) }
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.bugfix.toInteger(), versionProps.release.toBoolean())
}

void saveVersion() {
    ant.propertyfile(file: versionFile) {
        entry(key: 'major', type: 'int', operation: '=', value: version.major)
        entry(key: 'minor', type: 'int', operation: '=', value: version.minor)
        entry(key: 'bugfix', type: 'int', operation: '=', value: version.bugfix)
        entry(key: 'release', type: 'string', operation: '=', value: version.release)
    }
}